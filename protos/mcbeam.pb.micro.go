// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: protos/mcbeam.protos

package mcbeamproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the protos package it is being compiled against.
// A compilation error at this line likely means your copy of the
// protos package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the protos package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Mcbeam mcb

func NewMcbeamEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Mcbeam mcb

type McbeamService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	PushToUser(ctx context.Context, in *Push, opts ...client.CallOption) (*Response, error)
	SessionBindRemote(ctx context.Context, in *BindMsg, opts ...client.CallOption) (*Response, error)
	KickUser(ctx context.Context, in *KickMsg, opts ...client.CallOption) (*KickAnswer, error)
}

type mcbeamService struct {
	c    client.Client
	name string
}

func NewMcbeamService(name string, c client.Client) McbeamService {
	return &mcbeamService{
		c:    c,
		name: name,
	}
}

func (c *mcbeamService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mcbeam.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcbeamService) PushToUser(ctx context.Context, in *Push, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mcbeam.PushToUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcbeamService) SessionBindRemote(ctx context.Context, in *BindMsg, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mcbeam.SessionBindRemote", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcbeamService) KickUser(ctx context.Context, in *KickMsg, opts ...client.CallOption) (*KickAnswer, error) {
	req := c.c.NewRequest(c.name, "Mcbeam.KickUser", in)
	out := new(KickAnswer)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mcbeam mcb

type McbeamHandler interface {
	Call(context.Context, *Request, *Response) error
	PushToUser(context.Context, *Push, *Response) error
	SessionBindRemote(context.Context, *BindMsg, *Response) error
	KickUser(context.Context, *KickMsg, *KickAnswer) error
}

func RegisterMcbeamHandler(s server.Server, hdlr McbeamHandler, opts ...server.HandlerOption) error {
	type mcbeam interface {
		Call(ctx context.Context, in *Request, out *Response) error
		PushToUser(ctx context.Context, in *Push, out *Response) error
		SessionBindRemote(ctx context.Context, in *BindMsg, out *Response) error
		KickUser(ctx context.Context, in *KickMsg, out *KickAnswer) error
	}
	type Mcbeam struct {
		mcbeam
	}
	h := &mcbeamHandler{hdlr}
	return s.Handle(s.NewHandler(&Mcbeam{h}, opts...))
}

type mcbeamHandler struct {
	McbeamHandler
}

func (h *mcbeamHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.McbeamHandler.Call(ctx, in, out)
}

func (h *mcbeamHandler) PushToUser(ctx context.Context, in *Push, out *Response) error {
	return h.McbeamHandler.PushToUser(ctx, in, out)
}

func (h *mcbeamHandler) SessionBindRemote(ctx context.Context, in *BindMsg, out *Response) error {
	return h.McbeamHandler.SessionBindRemote(ctx, in, out)
}

func (h *mcbeamHandler) KickUser(ctx context.Context, in *KickMsg, out *KickAnswer) error {
	return h.McbeamHandler.KickUser(ctx, in, out)
}
